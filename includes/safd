	template <class iterator>
	class reverse_iteratormap {
	public:
		// -structors
		reverse_iteratormap			(void)												{ _iterator = iterator(); }
		reverse_iteratormap			(typename iterator::value_type * ptr)						{ _iterator = iterator(ptr); }
		reverse_iteratormap			(const iterator & x)										{ _iterator = x; --_iterator; }
		~reverse_iteratormap			(void)												{}
		// Conversion
		template <class U>			friend class										reverse_iteratormap;
		template <class U>
		reverse_iteratormap			(const reverse_iteratormap<U> & x)						{ _iterator = x.getiterator(); }

		// Assignment
		reverse_iteratormap &			operator=	(const reverse_iteratormap & x)			{ _iterator = x.getiterator(); return (*this); }
		reverse_iteratormap &			operator+=	(int n)									{ _iterator -= n; return (*this); }
		reverse_iteratormap &			operator-=	(int n)									{ _iterator += n; return (*this); }
		// Comparison
		template <class U> bool		operator==	(const reverse_iteratormap<U> & x) const	{ return (_iterator == x.getiterator()); }
		template <class U> bool		operator!=	(const reverse_iteratormap<U> & x) const	{ return (_iterator != x.getiterator()); }
		template <class U> bool		operator<	(const reverse_iteratormap<U> & x) const	{ return (_iterator > x.getiterator()); }
		template <class U> bool		operator>	(const reverse_iteratormap<U> & x) const	{ return (_iterator < x.getiterator()); }
		template <class U> bool		operator<=	(const reverse_iteratormap<U> & x) const	{ return (_iterator >= x.getiterator()); }
		template <class U> bool		operator>=	(const reverse_iteratormap<U> & x) const	{ return (_iterator <= x.getiterator()); }
		// -crementation
		reverse_iteratormap &			operator++	(void)									{ --_iterator; return (*this); }
		reverse_iteratormap &			operator--	(void)									{ ++_iterator; return (*this); }
		reverse_iteratormap			operator++	(int)									{ reverse_iteratormap<iterator> x(*this); --_iterator; return (x); }
		reverse_iteratormap			operator--	(int)									{ reverse_iteratormap<iterator> x(*this); ++_iterator; return (x); }
		// Operation
		reverse_iteratormap			operator+	(int n) const							{ return (_iterator - n + 1); }
		reverse_iteratormap			operator-	(int n) const							{ return (_iterator + n + 1); }
		std::ptrdiff_t				operator-	(const reverse_iteratormap & x) const		{ return (x.getiterator() - _iterator); }
		// Dereference
		typename iterator::value_type &	operator[]	(size_t n) const						{ return (*(_iterator - n)); }
		typename iterator::value_type &	operator*	(void) const							{ return (*_iterator); }
		typename iterator::value_type *	operator->	(void) const							{ return (&(*_iterator)); }
		// Member functions
		iterator							base		(void)									{ return (++iterator(_iterator)); }
		iterator							getiterator		(void) const							{ return (_iterator); }
		// Non-member functions
		friend reverse_iteratormap		operator+	(int n, const reverse_iteratormap & x)		{ return (x.getiterator() - n + 1); }

	private:
		iterator		_iterator;
	};
